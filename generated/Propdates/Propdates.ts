// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PostUpdate extends ethereum.Event {
  get params(): PostUpdate__Params {
    return new PostUpdate__Params(this);
  }
}

export class PostUpdate__Params {
  _event: PostUpdate;

  constructor(event: PostUpdate) {
    this._event = event;
  }

  get propId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isCompleted(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get update(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class PropUpdateAdminTransferStarted extends ethereum.Event {
  get params(): PropUpdateAdminTransferStarted__Params {
    return new PropUpdateAdminTransferStarted__Params(this);
  }
}

export class PropUpdateAdminTransferStarted__Params {
  _event: PropUpdateAdminTransferStarted;

  constructor(event: PropUpdateAdminTransferStarted) {
    this._event = event;
  }

  get propId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PropUpdateAdminTransfered extends ethereum.Event {
  get params(): PropUpdateAdminTransfered__Params {
    return new PropUpdateAdminTransfered__Params(this);
  }
}

export class PropUpdateAdminTransfered__Params {
  _event: PropUpdateAdminTransfered;

  constructor(event: PropUpdateAdminTransfered) {
    this._event = event;
  }

  get propId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Propdates__propdateInfoResultValue0Struct extends ethereum.Tuple {
  get propUpdateAdmin(): Address {
    return this[0].toAddress();
  }

  get lastUpdated(): BigInt {
    return this[1].toBigInt();
  }

  get isCompleted(): boolean {
    return this[2].toBoolean();
  }
}

export class Propdates extends ethereum.SmartContract {
  static bind(address: Address): Propdates {
    return new Propdates("Propdates", address);
  }

  NOUNS_DAO(): Address {
    let result = super.call("NOUNS_DAO", "NOUNS_DAO():(address)", []);

    return result[0].toAddress();
  }

  try_NOUNS_DAO(): ethereum.CallResult<Address> {
    let result = super.tryCall("NOUNS_DAO", "NOUNS_DAO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingPropUpdateAdmin(param0: BigInt): Address {
    let result = super.call(
      "pendingPropUpdateAdmin",
      "pendingPropUpdateAdmin(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_pendingPropUpdateAdmin(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingPropUpdateAdmin",
      "pendingPropUpdateAdmin(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  propdateInfo(propId: BigInt): Propdates__propdateInfoResultValue0Struct {
    let result = super.call(
      "propdateInfo",
      "propdateInfo(uint256):((address,uint88,bool))",
      [ethereum.Value.fromUnsignedBigInt(propId)]
    );

    return changetype<Propdates__propdateInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_propdateInfo(
    propId: BigInt
  ): ethereum.CallResult<Propdates__propdateInfoResultValue0Struct> {
    let result = super.tryCall(
      "propdateInfo",
      "propdateInfo(uint256):((address,uint88,bool))",
      [ethereum.Value.fromUnsignedBigInt(propId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Propdates__propdateInfoResultValue0Struct>(value[0].toTuple())
    );
  }
}

export class AcceptPropUpdateAdminCall extends ethereum.Call {
  get inputs(): AcceptPropUpdateAdminCall__Inputs {
    return new AcceptPropUpdateAdminCall__Inputs(this);
  }

  get outputs(): AcceptPropUpdateAdminCall__Outputs {
    return new AcceptPropUpdateAdminCall__Outputs(this);
  }
}

export class AcceptPropUpdateAdminCall__Inputs {
  _call: AcceptPropUpdateAdminCall;

  constructor(call: AcceptPropUpdateAdminCall) {
    this._call = call;
  }

  get propId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptPropUpdateAdminCall__Outputs {
  _call: AcceptPropUpdateAdminCall;

  constructor(call: AcceptPropUpdateAdminCall) {
    this._call = call;
  }
}

export class PostUpdateCall extends ethereum.Call {
  get inputs(): PostUpdateCall__Inputs {
    return new PostUpdateCall__Inputs(this);
  }

  get outputs(): PostUpdateCall__Outputs {
    return new PostUpdateCall__Outputs(this);
  }
}

export class PostUpdateCall__Inputs {
  _call: PostUpdateCall;

  constructor(call: PostUpdateCall) {
    this._call = call;
  }

  get propId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isCompleted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get update(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class PostUpdateCall__Outputs {
  _call: PostUpdateCall;

  constructor(call: PostUpdateCall) {
    this._call = call;
  }
}

export class TransferPropUpdateAdminCall extends ethereum.Call {
  get inputs(): TransferPropUpdateAdminCall__Inputs {
    return new TransferPropUpdateAdminCall__Inputs(this);
  }

  get outputs(): TransferPropUpdateAdminCall__Outputs {
    return new TransferPropUpdateAdminCall__Outputs(this);
  }
}

export class TransferPropUpdateAdminCall__Inputs {
  _call: TransferPropUpdateAdminCall;

  constructor(call: TransferPropUpdateAdminCall) {
    this._call = call;
  }

  get propId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferPropUpdateAdminCall__Outputs {
  _call: TransferPropUpdateAdminCall;

  constructor(call: TransferPropUpdateAdminCall) {
    this._call = call;
  }
}
